version: '3.8'

services:
  # Main coordinator service
  coordinator:
    build: .
    container_name: spotify-coordinator
    environment:
      - NODE_ENV=production
      - ROLE=coordinator # Main app instance with dashboard and scheduler
      - SESSION_COUNT=1 # Initial session count for coordinator, if applicable before scheduler takes over
      - CAPTCHA_API_KEY=${CAPTCHA_API_KEY} # Added CAPTCHA_API_KEY
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - ./sessions:/app/sessions
    ports:
      - "3000:3000"
    networks:
      - spotify-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/status"] # Updated health check
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s # Give app more time to start before health check

  # Scalable session workers
  session: # These are the workers, running the same image but potentially a different command or scaled separately
    build: .
    environment:
      - NODE_ENV=production
      - ROLE=session # Identifies as a session worker (src/index.js might use this in future)
      # SESSION_COUNT for individual workers is likely not needed if they are just processing tasks
      - DISPLAY=:99
      - CAPTCHA_API_KEY=${CAPTCHA_API_KEY} # Added CAPTCHA_API_KEY
    volumes:
      - ./config:/app/config:ro # Workers might need config for their tasks
      - ./logs:/app/logs # Separate logs for workers if needed, or centralize logging
      - ./sessions:/app/sessions
      - /dev/shm:/dev/shm # Important for Playwright/Chrome
    networks:
      - spotify-network
    restart: unless-stopped # Restart workers if they fail
    depends_on:
      coordinator: # Ensure coordinator is up before workers (optional, depends on app logic)
        condition: service_healthy # Wait for coordinator to be healthy
    deploy: # This section is for Docker Swarm, not primarily for 'docker-compose scale'
      replicas: 3 # Default replicas if deploying to Swarm
      resources:
        limits:
          memory: 1G # Max memory per worker
          cpus: '0.5' # Max CPU per worker
        reservations:
          memory: 512M # Reserved memory
          cpus: '0.25' # Reserved CPU
    # Health check for session workers might be different or not needed if they don't run a server
    # For now, removing it as they don't expose a port/API by default.
    # If they did run a simple health check endpoint, it could be added.
    # Security settings (good to have)
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    # SYS_ADMIN is a very broad permission. If --no-sandbox is used for Playwright (as in src/index.js),
    # this might not be strictly necessary. Evaluate if it can be removed or replaced with more specific capabilities.
    cap_add:
      - SYS_ADMIN # Consider if still needed with --no-sandbox

  # Optional: Redis for session coordination (if needed for large scale)
  redis:
    image: redis:7-alpine
    container_name: spotify-redis
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - spotify-network
    restart: unless-stopped
    profiles: # Only start Redis if 'redis' profile is activated
      - redis

# The 'monitor' service seems redundant if the 'coordinator' runs the dashboard on port 3000.
# If 'monitor' was intended for a different purpose (e.g. separate monitoring stack like Prometheus/Grafana),
# it would be defined differently. For now, removing it to avoid confusion with the integrated dashboard.

networks:
  spotify-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local

# Example usage commands:
# Start with default 3 sessions:
#   docker-compose up -d
#
# Scale to 10 sessions:
#   docker-compose up -d --scale session=10
#
# Scale to 100 sessions:
#   docker-compose up -d --scale session=100
#
# Start with monitoring:
#   docker-compose --profile monitoring up -d
#
# Start with Redis coordination:
#   docker-compose --profile redis up -d
#
# View logs:
#   docker-compose logs -f session
#
# Stop all:
#   docker-compose down
